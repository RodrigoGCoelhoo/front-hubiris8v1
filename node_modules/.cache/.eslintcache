[{"/Users/rodrigo/Desktop/Iris8/Projetos/03. Hub Iris8/front/repogit/front-hubiris8v1/src/index.js":"1","/Users/rodrigo/Desktop/Iris8/Projetos/03. Hub Iris8/front/repogit/front-hubiris8v1/src/App.js":"2","/Users/rodrigo/Desktop/Iris8/Projetos/03. Hub Iris8/front/repogit/front-hubiris8v1/src/components/Card.js":"3"},{"size":177,"mtime":1625537139998,"results":"4","hashOfConfig":"5"},{"size":6846,"mtime":1626195334321,"results":"6","hashOfConfig":"5"},{"size":35875,"mtime":1626194689849,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"etvbqb",{"filePath":"11","messages":"12","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"/Users/rodrigo/Desktop/Iris8/Projetos/03. Hub Iris8/front/repogit/front-hubiris8v1/src/index.js",[],["16","17"],"/Users/rodrigo/Desktop/Iris8/Projetos/03. Hub Iris8/front/repogit/front-hubiris8v1/src/App.js",["18","19","20","21","22","23","24","25","26","27","28","29"],"/Users/rodrigo/Desktop/Iris8/Projetos/03. Hub Iris8/front/repogit/front-hubiris8v1/src/components/Card.js",["30","31","32","33","34","35","36","37","38","39","40","41","42"],"import React from 'react';\nimport { useState } from 'react';\nimport ReactLoading from \"react-loading\";\n\nfunction Card(props) {\n\n    const BG = \"#DFE0E2\"; //#01c1d4\n    const RED = \"#DE1A1A\";\n    const GREEN = \"#09E85E\";\n    const YELLOW = \"#F0A202\";\n\n    const VAR_MAX_TAMANHO_FILES = 0.3;\n    const VAR_MAX_QUANT_ALTERACOES = 0.2;\n\n    const headers = {\n        'Content-Type': 'text/plain'\n    };\n\n    const [loading, setLoading] = useState(true);\n    const [lastDataStatusFile, setLastDataStatusFile] = useState(null)\n\n    // Vars computador\n\n    const [boolCPU, setBoolCPU] = useState(false);\n    const [boolRAM, setBoolRAM] = useState(false);\n    const [boolArmazenamento, setBoolArmazenamento] = useState(false);\n    const [errComp, setErrComp] = useState(0);\n    const [boolErrComp, setBoolErrComp] = useState(true);\n    const [boolShowErrComp, setBoolShowErrComp] = useState(false);\n\n    // Vars status horus\n\n    const [boolMedia, setBoolMedia] = useState(true);\n    const [dataMedia, setDataMedia] = useState(\"2000-01-01\");\n    const [nCreated, setNCreated] = useState(0);\n    const [nDeleted, setNDeleted] = useState(0);\n    const [mediaCreated, setMediaCreated] = useState(0);\n    const [mediaDeleted, setMediaDeleted] = useState(0);\n\n    const [listBoolCheckHorus, setListBoolCheckHorus] = useState([]);\n    const [errHorus, setErrHorus] = useState(0);\n    const [boolErrHorus, setBoolErrHorus] = useState(true);\n    const [boolShowErrHorus, setBoolShowErrHorus] = useState(false);\n\n    // Vars modulo tamanho\n\n    const [boolTamanho, setBoolTamanho] = useState(true);\n    const [dataTamanho, setDataTamanho] = useState(null);\n    const [dicSoma, setDicSoma] = useState(null);\n    const [dicQuant, setDicQuant] = useState(null);\n    const [dicAtuais, setDicAtuais] = useState(null);\n    const [dicMedias, setDicMedias] = useState(null);\n    let listaPOI = [];\n    const [errTamanho, setErrTamanho] = useState(0);\n    const [boolErrTamanho, setBoolErrTamanho] = useState(true);\n    const [boolShowErrTamanho, setBoolShowErrTamanho] = useState(false);\n\n    // Vars modulo sight\n\n    const [listBoolCheckSight, setListBoolCheckSight] = useState([]);\n    const [errSight, setErrSight] = useState(0);\n    const [boolErrSight, setBoolErrSight] = useState(true);\n    const [boolShowErrSight, setBoolShowErrSight] = useState(false);\n\n    // Vars toogle modulos\n\n    let [moduloStatusPC, setModuloStatusPC] = useState(false);\n    let [arrowStatusPC, setArrowStatusPC] = useState(\">\");\n\n    let [moduloStatusHorus, setModuloStatusHorus] = useState(false);\n    let [arrowStatusHorus, setArrowStatusHorus] = useState(\">\");\n\n    let [moduloStatusTamanho, setModuloStatusTamanho] = useState(false);\n    let [arrowStatusTamanho, setArrowStatusTamanho] = useState(\">\");\n\n    let [moduloStatusCamerasPretas, setModuloStatusCamerasPretas] = useState(false);\n    let [arrowStatusCamerasPretas, setArrowStatusCamerasPretas] = useState(\">\");\n\n    let [moduloStatusSight, setModuloStatusSight] = useState(false);\n    let [arrowStatusSight, setArrowStatusSight] = useState(\">\");\n\n    function sleep (time) {\n        return new Promise((resolve) => setTimeout(resolve, time));\n      }\n    \n    // Functions CPU\n\n    function progressBar (percent, width) {\n\n        const BGBAR = \"#565554\"; //#DFE0E2\n        percent = percent/100;\n        var widthOut = width;\n        var widthIn = width * percent;\n        let color = YELLOW; //amarelo\n        if (percent >= 0.95){\n            color = RED; //vermelho\n        } else if (percent <= 0.5) {\n            color = GREEN //verde\n        }\n        return(\n        <div style={{width: widthOut + 50 + \"px\", height:\"25px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-between\", margin:\"5px\"}}>\n            <div style={{width: widthOut + \"px\", height:\"20px\", backgroundColor:BGBAR, borderRadius:\"100px\", display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n                <div style={{left:'10px', width:width-5, height:\"100%\", display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", justifyItems:\"center\"}}>\n                    <div style={{width: widthIn - 5 + \"px\", height:\"15px\", backgroundColor:color, display:\"flex\",borderRadius:\"100px\", alignSelf:\"flex-start\", justifySelf:\"center\"}}>\n\n                    </div>\n                </div>\n            </div>\n            <text>{Math.round(percent*100) + \"%\"}</text>\n        </div>\n    )}\n\n    function boolCountSwitchComp(percent, boolCheck, setBoolCheck){\n        percent = percent/100\n        if (percent >= 0.95){\n            if (!boolCheck){\n                setBoolCheck(true)\n            }\n        }\n    }\n\n    function countErrCPU(){\n        sleep(1000).then(() => {\n        let l = 0;\n        if (boolCPU){\n            l = l + 1;\n        }\n        if (boolRAM){\n            l = l + 1;\n        }\n        if (boolArmazenamento){\n            l = l + 1;\n        }\n        setErrComp(l);\n        setBoolShowErrComp(true);\n    })};\n\n    // Functions Horus\n\n    function textHealthOperation(running, number) {\n        return(\n            <div>\n                {running === number ? (\n                <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                    <div style={{background:GREEN, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\", borderColor:\"black\"}}></div>\n                    <text>Em operação: {running}/{number}</text>\n                </div>\n                ):(\n                <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                    <div style={{background:RED, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\"}}></div>\n                    <text>Em operação: {running}/{number}</text>\n                </div>)}\n            </div>)}\n\n    function textHealthSeconds(seconds) {\n        return(\n        <div>\n            {seconds < 300 ? (\n            <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                <div style={{background:GREEN, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\", borderColor:\"black\"}}></div>\n                <text>Última atualização: {seconds} seg.</text>\n            </div>\n            ):(\n            <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                <div style={{background:RED, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\"}}></div>\n                <text>Última atualização: {seconds} seg.</text>\n            </div>)}\n        </div>)}\n\n    function textHealthReset(hours) {\n        return(\n        <div>\n            {hours < 24 ? (\n            <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                <div style={{background:GREEN, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\", borderColor:\"black\"}}></div>\n                <text>Último reset: {hours}h</text>\n            </div>\n            ):(\n            <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                <div style={{background:RED, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\"}}></div>\n                <text>Último reset: {hours}h</text>\n            </div>)}\n        </div>)}\n    \n    function textHealthQueue(fila) {\n        return(<div>\n            {fila < 10 ? (\n            <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                <div style={{background:GREEN, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\", borderColor:\"black\"}}></div>\n                <text>Fila de processamento: {fila}</text>\n            </div>\n            ):(\n            <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                <div style={{background:RED, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\"}}></div>\n                <text>Fila de processamento: {fila}</text>\n            </div>)}\n        </div>)}\n\n    function geraMediaStatusFiles(dados) {\n        let dataRecente = new Date(\"2000-01-01\");\n        let nRecente;\n        for (let n in dados){\n            let dataRaw = dados[n][\"data\"].slice(0,10)\n            let ano = dataRaw.split(\"-\")[0]\n            let mes = String(parseInt(dataRaw.split(\"-\")[1])-1)\n            let dia = dataRaw.split(\"-\")[2]\n            let dataMid = new Date(ano, mes, dia)\n            if (dataMid > dataRecente) {\n                dataRecente = dataMid\n                nRecente = n\n            }\n        }\n\n        setDataMedia(dataRecente.toISOString())\n        setNCreated(dados[nRecente][\"created\"]);\n        setNDeleted(dados[nRecente][\"deleted\"]);\n\n        let somaCreated = 0;\n        let somaDeleted = 0;\n        let quantidade = dados.length - 1\n\n        for (let n in dados) {\n            let dataRaw = dados[n][\"data\"].slice(0,10)\n            let ano = dataRaw.split(\"-\")[0]\n            let mes = String(parseInt(dataRaw.split(\"-\")[1])-1)\n            let dia = dataRaw.split(\"-\")[2]\n            let dataMid = new Date(ano, mes, dia)\n\n            if (dataMid.getFullYear() != dataRecente.getFullYear() || dataMid.getMonth() != dataRecente.getMonth() || dataMid.getDate() != dataRecente.getDate()){\n\n                somaCreated += dados[n][\"created\"]\n                somaDeleted += dados[n][\"deleted\"]\n\n            }\n        }\n\n        setMediaCreated(Math.round(somaCreated/quantidade));\n        setMediaDeleted(Math.round(somaDeleted/quantidade));\n\n        setBoolMedia(false);\n       }\n\n    function pintaMedia(unico, media){\n        let col = \"#rgba(0, 0, 0, 0)\"\n        let colT = \"black\"\n        if (unico > media*(1+VAR_MAX_QUANT_ALTERACOES) || unico < media*(1-VAR_MAX_QUANT_ALTERACOES)){\n            col = \"rgba(222, 26, 26, 0.8)\"\n            colT = \"white\"\n        }\n\n        return(\n            <div style={{backgroundColor:col, padding:\"1px\", paddingLeft:\"4px\", paddingRight:\"4px\"}}>\n                <text style={{color:colT}}>{unico}</text>\n            </div>)\n        }\n\n    function boolCountSwitchHorus(prop_) {\n\n        function listCheckPush(checkName){\n            if (!listBoolCheckHorus.includes(checkName)){\n                let l = listBoolCheckHorus\n                l.push(checkName)\n                setListBoolCheckHorus(l)\n            }\n        }\n\n        if (prop_[\"runningWorkers\"] !== prop_[\"workerNumber\"]){\n            listCheckPush(\"runningWorkers\")\n        }\n\n        if (prop_[\"runningCaptures\"] !== prop_[\"captureNumber\"]){\n            listCheckPush(\"runningCaptures\")\n        }\n\n        if (prop_[\"secondsFromLastWorkerHeatBeat\"] > 300){\n            listCheckPush(\"secondsFromLastWorkerHeatBeat\")\n        }\n\n        if (prop_[\"secondsFromLastCaptureHeatBeat\"] > 300){\n            listCheckPush(\"secondsFromLastCaptureHeatBeat\")\n        }\n\n        if (prop_[\"captureLastReset\"] > 24){\n            listCheckPush(\"captureLastReset\")\n        }\n\n        if (prop_[\"workerLastReset\"] > 24){\n            listCheckPush(\"workerLastReset\")\n        }\n\n        if (prop_[\"queueSize\"] > 100){\n            listCheckPush(\"queueSize\")\n        }\n\n        if (nCreated > mediaCreated*(1+VAR_MAX_QUANT_ALTERACOES) || nCreated < mediaCreated*(1-VAR_MAX_QUANT_ALTERACOES)){\n            listCheckPush(\"createdOut\")\n        }\n\n        if (nDeleted > mediaDeleted*(1+VAR_MAX_QUANT_ALTERACOES) || nDeleted < mediaDeleted*(1-VAR_MAX_QUANT_ALTERACOES)){\n            listCheckPush(\"deletedOut\")\n        }\n\n        if (boolErrHorus){\n            txtErrHorus()\n        }\n    }\n\n    function txtErrHorus(){\n        sleep(1000).then(() => {\n            setErrHorus(listBoolCheckHorus.length);\n            setBoolErrHorus(false);\n            setBoolShowErrHorus(true);\n        });\n    }\n\n    // Functions Tamanho\n\n    function dataStatusTamanho(dados){\n        let dataRecente = new Date(\"2000-01-01\");\n        let nRecente;\n        for (let n in dados){\n            let dataRaw = dados[n][\"data\"].slice(0,10)\n            let ano = dataRaw.split(\"-\")[0]\n            let mes = String(parseInt(dataRaw.split(\"-\")[1])-1)\n            let dia = dataRaw.split(\"-\")[2]\n            let dataMid = new Date(ano, mes, dia)\n            if (dataMid > dataRecente) {\n                dataRecente = dataMid\n                nRecente = n\n            }\n        }\n\n        setDataTamanho(dataRecente)\n        //console.log(dataRecente)\n\n        let dicSomaTamanhos = {};\n        let dicQuantTamanhos = {};\n        let dicAtuais = {};\n\n        for (let n in dados) {\n            let dataRaw = dados[n][\"data\"].slice(0,10)\n            let ano = dataRaw.split(\"-\")[0]\n            let mes = String(parseInt(dataRaw.split(\"-\")[1])-1)\n            let dia = dataRaw.split(\"-\")[2]\n            let pov = dados[n][\"pov\"]\n\n            if (ano != dataRecente.getFullYear() || mes != dataRecente.getMonth() || dia != dataRecente.getDate()){\n\n                if (dicSomaTamanhos.hasOwnProperty(pov)) {\n                    dicSomaTamanhos[pov] += dados[n][\"mb\"];\n                    dicQuantTamanhos[pov] += 1;\n                } else {\n                    dicSomaTamanhos[pov] = dados[n][\"mb\"];\n                    dicQuantTamanhos[pov] = 1;\n                }\n            } else {\n                dicAtuais[pov] = dados[n][\"mb\"]\n            }\n        }\n\n        setDicAtuais(dicAtuais);\n        setDicSoma(dicSomaTamanhos);\n        setDicQuant(dicQuantTamanhos);\n        setBoolTamanho(false);\n    }\n\n    function mediaStatusTamanho(){\n\n        let dicMedias = {};\n\n        for (var key in dicSoma){\n            dicMedias[key] = dicSoma[key]/dicQuant[key]\n        }\n\n        setDicMedias(dicMedias);\n        setDicSoma(null);\n    }\n\n    function listaFinalTamanhos(){\n        for (let u in dicAtuais){\n            if (dicAtuais[u] > dicMedias[u]*(1 + VAR_MAX_TAMANHO_FILES) || dicAtuais[u] < dicMedias[u]*(1 - VAR_MAX_TAMANHO_FILES)){\n                listaPOI.push(u)\n        }\n    }}\n\n    function txtErrTamanho(){\n        sleep(1000).then(() => {\n            setErrTamanho(listaPOI.length);\n            setBoolErrTamanho(false);\n            if (listaPOI.length > 0){\n            setBoolShowErrTamanho(true);}\n        });\n    }\n\n    // Functions Sight\n\n    function estadoSight (estado) {\n\n        let texto = \"Ligado\";\n        let color = GREEN;\n\n        if (estado === \"desligado\"){\n            texto = \"Desligado\"\n            color = RED\n        }\n\n        return (\n            <div style={{padding:\"2px\", paddingLeft:\"4px\", paddingRight:\"4px\", display:\"flex\", flexDirection:\"row\", alignItems:\"center\"}}>\n                <div style={{background:color, borderRadius:\"100px\", width:\"10px\", height:\"10px\", marginRight:\"5px\", borderColor:\"black\"}}></div>\n                <text>{texto}</text>\n            </div>)\n        }\n\n\n\n    function boolCountSwitchSight(prop_) {\n\n        function listCheckPush(checkName){\n            if (!listBoolCheckSight.includes(checkName)){\n                let l = listBoolCheckSight\n                l.push(checkName)\n                setListBoolCheckSight(l)\n            }\n        }\n\n        for (let u in prop_){\n            if (prop_[u][\"status\"] === \"desligado\"){\n                listCheckPush(prop_[u][\"pov\"])\n            }\n        }\n        \n    }\n\n    function txtErrSight(){\n        sleep(1000).then(() => {\n            setErrSight(listBoolCheckSight.length);\n            setBoolErrSight(false);\n            if (listBoolCheckSight.length > 0){\n            setBoolShowErrSight(true);}\n        });\n    }\n\n    // Functions Infra\n\n    function switchToggleArrow(modulo, setModulo, setArrow){\n        if (modulo === true){\n            setModulo(false);\n            setArrow(\">\")\n        }\n        if (modulo === false){\n            setModulo(true);\n            setArrow(\"v\")\n        }\n    }\n\n    function checkLoading() {\n        if (props.horusHealthStatus && props.statusPc && props.statusTamanho && props.statusFiles && props.statusSight){\n            setLoading(false);\n        }\n    }\n\n    function erroBanco(){\n        return(\n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", marginBottom:\"10px\", marginTop:\"10px\"}}>\n                <text>Sem conexão com o banco de dados.</text>\n            </div>\n        )\n    }\n\n    function dataIso2Br(dataIso){\n        let ano = dataIso.slice(0,4)\n        let mes = dataIso.slice(5,7)\n        let dia = dataIso.slice(8,10)\n        return (dia + \"/\" + mes + \"/\" + ano)\n    }\n    \n\n  return (\n    <div>\n    {loading ? (\n        <div style={{width:\"500px\", minHeight:\"294px\", backgroundColor:\"gray\", margin:\"20px\", fontFamily:\"Arial\", padding:\"10px\", boxShadow:\"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\", opacity:\"50%\", display:\"flex\", alignItems:\"center\", justifyContent:\"center\"}}>\n            {checkLoading()}\n            <ReactLoading type={\"bars\"} color={\"black\"} />\n        </div>\n    ):(\n    <div style={{width:\"500px\", backgroundColor:BG, margin:\"20px\", fontFamily:\"Arial\", padding:\"10px\", boxShadow:\"0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\", display:\"flex\", flexDirection:\"column\"}}>        \n        <div style={{display:\"flex\", flexDirection:\"row\", justifyContent:\"space-between\", alignItems:\"center\"}}>\n            <h2 style={{margin:\"5px\"}}>{props.horusHealthStatus[\"locationName\"]}</h2>\n            <h3 style={{margin:\"5px\"}}>{\"IP: \" + props.horusHealthStatus[\"ip\"]}</h3>\n        </div>\n        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-between\"}}>\n            <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"center\"}}>\n                <h3 style={{margin:\"0px\"}}>Computador</h3>\n                {props.statusPc.length !== 0 && (\n                    <div>\n                {props.statusPc && (boolCountSwitchComp(props.statusPc[0][\"cpu\"], boolCPU, setBoolCPU))}\n                {props.statusPc && (boolCountSwitchComp(props.statusPc[0][\"ram\"], boolRAM, setBoolRAM))}\n                {props.statusPc && (boolCountSwitchComp(parseFloat(props.statusPc[0][\"usedDisk\"])*100/parseFloat(props.statusPc[0][\"totalDisk\"]), boolArmazenamento, setBoolArmazenamento))}\n                {(boolCPU || boolRAM || boolArmazenamento) && props.statusPc && (countErrCPU())}\n                {boolShowErrComp && (\n                    <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", backgroundColor:RED, borderRadius:\"100px\", width:\"22px\", height:\"22px\", marginLeft:\"10px\"}}>\n                        <text style={{color:BG, fontWeight:\"bolder\", fontSize:\"90%\"}}>{errComp}</text>\n                    </div>\n                )}\n                </div>)}\n            </div>\n            <button onClick={() => switchToggleArrow(moduloStatusPC, setModuloStatusPC, setArrowStatusPC)}\n                    style={{fontSize:\"110%\", width:\"25px\", height:\"25px\", borderRadius:\"100px\", borderColor:\"black\", marginBlock:\"5px\"}}>{arrowStatusPC}</button>\n        </div>\n        <div style={{height:\"4px\", width:\"100%\", borderColor:\"black\", backgroundColor:\"black\", opacity:\"50%\", marginBottom:\"10px\"}}></div>\n        <div style={{display:\"flex\", flexDirection:\"column\"}}>\n            {moduloStatusPC && ( <div>\n            {props.statusPc.length !== 0 ? (\n            <div>\n                <div style={{display:\"flex\", flexDirection:\"row\", justifyContent:\"space-between\", marginTop:\"10px\"}}>\n                    <div style={{display:\"flex\", flexDirection:\"column\"}}>\n                        <text style={{fontWeight:\"bolder\"}}>CPU:</text>\n                        {progressBar(props.statusPc[0][\"cpu\"], 180)}\n                    </div>\n                    <div style={{display:\"flex\", flexDirection:\"column\"}}>\n                        <text style={{fontWeight:\"bolder\"}}>RAM:</text>\n                        {progressBar(props.statusPc[0][\"ram\"], 180)}\n                    </div>\n                </div>\n                    <div style={{display:\"flex\", flexDirection:\"column\", marginTop:\"10px\", marginBottom:\"10px\"}}>\n                        <text style={{fontWeight:\"bolder\"}}>Armazenamento:</text>\n                        {progressBar(parseFloat(props.statusPc[0][\"usedDisk\"])*100/parseFloat(props.statusPc[0][\"totalDisk\"]), 440)}\n                        <div style={{display:\"flex\", flexDirection:\"row\", justifyContent:\"space-around\", width:\"90%\"}}>\n                            <text style={{fontSize:\"85%\"}}>Total: {props.statusPc[0][\"totalDisk\"]} Gb</text>\n                            <text style={{fontSize:\"85%\"}}>Usado: {props.statusPc[0][\"usedDisk\"]} Gb</text>\n                            <text style={{fontSize:\"85%\"}}>Livre: {props.statusPc[0][\"freeDisk\"]} Gb</text>\n                        </div>\n                    </div>\n                <div style={{display:\"flex\", flexDirection:\"columns\", alignItems:\"center\", justifyContent:\"flex-end\", marginBottom:\"10px\"}}>\n                    <text style={{fontSize:\"85%\"}}>Último update: {dataIso2Br(props.statusPc[0][\"data\"].slice(0,10))}</text>\n                </div>\n            </div>\n            ):(\n                erroBanco()\n            )}\n            </div>\n            )}\n\n        </div>\n        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-between\"}}>\n        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"center\"}}>\n                <h3 style={{margin:\"0px\"}}>Horus</h3>\n                {props.horusHealthStatus && (boolCountSwitchHorus(props.horusHealthStatus))}\n                {boolErrHorus && (txtErrHorus)}\n                {boolShowErrHorus && (\n                    <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", backgroundColor:RED, borderRadius:\"1000px\", width:\"22px\", height:\"22px\", marginLeft:\"10px\"}}>\n                        <text style={{color:BG, fontWeight:\"bolder\", fontSize:\"90%\"}}>{errHorus}</text>\n                    </div>\n                )}\n                \n        </div>\n        <button onClick={() => switchToggleArrow(moduloStatusHorus, setModuloStatusHorus, setArrowStatusHorus)}\n                style={{fontSize:\"110%\", width:\"25px\", height:\"25px\", borderRadius:\"100px\", borderColor:\"black\", marginBlock:\"5px\"}}>{arrowStatusHorus}</button>\n        </div>\n        <div style={{height:\"4px\", width:\"100%\", borderColor:\"black\", backgroundColor:\"black\", opacity:\"50%\", marginBottom:\"10px\"}}></div>\n        <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n        {props.horusHealthStatus && props.horusHealthStatus !== \"erro\" && moduloStatusHorus &&(\n        <div tyle={{display:\"flex\", flexDirection:\"column\", width:\"100%\"}}>\n            <div style={{display:\"flex\", flexDirection:\"row\", width:\"100%\", alignItems:\"flex-start\", justifyContent:\"space-around\", marginTop:\"15px\",}}>\n                <div style={{display:\"flex\", flexDirection:\"column\"}}>\n                    <text style={{fontWeight:\"bolder\", fontSize:\"110%\", marginBottom:\"5px\"}}>Workers</text>\n                    {textHealthOperation(props.horusHealthStatus[\"runningWorkers\"], props.horusHealthStatus[\"workerNumber\"])}\n                    {textHealthSeconds(props.horusHealthStatus[\"secondsFromLastWorkerHeatBeat\"])}\n                    {textHealthReset(props.horusHealthStatus[\"workerLastReset\"])}\n                    {textHealthQueue(props.horusHealthStatus[\"queueSize\"])}\n                </div>\n                <div style={{display:\"flex\", flexDirection:\"column\", marginLeft:\"20px\"}}>\n                    <text style={{fontWeight:\"bolder\", fontSize:\"110%\", marginBottom:\"5px\"}}>Captures</text>\n                    {textHealthOperation(props.horusHealthStatus[\"runningCaptures\"], props.horusHealthStatus[\"captureNumber\"])}\n                    {textHealthSeconds(props.horusHealthStatus[\"secondsFromLastCaptureHeatBeat\"])}\n                    {textHealthReset(props.horusHealthStatus[\"captureLastReset\"])}\n                </div>\n            </div>\n        </div>\n        )}\n        { moduloStatusHorus && (\n        <div style={{width:\"60%\", height:\"2px\", backgroundColor:\"black\", opacity:\"30%\", marginTop:\"15px\", marginBottom:\"15px\"}}>\n        </div>)}\n        {props.errStatusFiles && moduloStatusHorus ? (\n            erroBanco()\n        ):(<div>\n        {props.statusFiles && props.statusFiles.length !== 0 && moduloStatusHorus && (\n        <div style={{display:\"flex\", flexDirection:\"row\", width:\"100%\", alignItems:\"center\", justifyContent:\"space-around\"}}>\n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", width:\"100%\"}}>\n                {boolMedia && (geraMediaStatusFiles(props.statusFiles))}\n                {props.statusFiles && props.statusFiles !== \"erro\" && (boolCountSwitchHorus(props.statusFiles))}\n                {props.statusFiles && props.statusFiles !== \"erro\" && moduloStatusHorus && (\n                    <div style={{display:\"flex\", flexDirection:\"column\", width:\"100%\", marginBottom:\"10px\"}}>\n                        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-around\", width:\"100%\"}}>\n                            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n                                <text style={{fontWeight:\"bolder\", marginBottom:\"5px\"}}>Modificação</text>\n                                <text>Arquivos criados</text>\n                                <text>Arquivos apagados</text>\n                            </div>\n                            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", marginLeft:\"20px\"}}>\n                                <text style={{fontWeight:\"bolder\", marginBottom:\"5px\"}}>Quantidade</text>\n                                <text>{pintaMedia(nCreated, mediaCreated)}</text>\n                                <text>{pintaMedia(nDeleted, mediaDeleted)}</text>\n                            </div>\n                            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", marginLeft:\"20px\"}}>\n                                <text style={{fontWeight:\"bolder\", marginBottom:\"5px\"}}>Média</text>\n                                <text>{mediaCreated}</text>\n                                <text>{mediaDeleted}</text>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n        )}</div>)}\n        {moduloStatusHorus && (\n            <div style={{display:\"flex\", flexDirection:\"column\", alignSelf:\"flex-end\", justifySelf:\"flex-end\"}}>\n                <text style={{fontSize:\"85%\", marginBottom:\"10px\"}}>Último update: {dataIso2Br(dataMedia)}</text>\n            </div>)}\n        {props.statusFiles.length === 0 && moduloStatusHorus && (\n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", marginBottom:\"10px\", marginTop:\"10px\"}}>\n                <text>Este servidor não possui arquivos de vídeo.</text>\n            </div>\n        )}\n        </div>\n        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-between\"}}>\n            <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"center\"}}>\n                <h3 style={{margin:\"0px\"}}>Tamanho dos arquivos</h3>\n                {boolErrTamanho && (txtErrTamanho())}\n                {boolShowErrTamanho && (\n                    <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", backgroundColor:RED, borderRadius:\"100px\", width:\"22px\", height:\"22px\", marginLeft:\"10px\"}}>\n                        <text style={{color:BG, fontWeight:\"bolder\", fontSize:\"90%\"}}>{errTamanho}</text>\n                    </div>\n                )}\n                \n            </div>\n            <button onClick={() => switchToggleArrow(moduloStatusTamanho, setModuloStatusTamanho, setArrowStatusTamanho)}\n                    style={{fontSize:\"110%\", width:\"25px\", height:\"25px\", borderRadius:\"100px\", borderColor:\"black\", marginBlock:\"5px\"}}>{arrowStatusTamanho}</button>\n        </div>\n        <div style={{height:\"4px\", width:\"100%\", borderColor:\"black\", backgroundColor:\"black\", opacity:\"50%\", marginBottom:\"10px\"}}></div>                \n            {props.errStatusTamanho && moduloStatusTamanho ? (\n                erroBanco()\n            ):(<div>\n            {props.statusTamanho.length === 0 && moduloStatusTamanho ? (\n                <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", marginBottom:\"10px\", marginTop:\"10px\"}}>\n                    <text>Sem câmeras com defeito.</text>\n                </div>\n            ):(<div>\n            {boolTamanho && (dataStatusTamanho(props.statusTamanho))}\n            {dicSoma && (mediaStatusTamanho())}\n            {dicMedias && (listaFinalTamanhos())}\n            {listaPOI && (txtErrTamanho)}\n            {props.statusTamanho && moduloStatusTamanho && (\n                <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-around\",marginTop:\"10px\", marginBottom:\"10px\"}}>\n                    <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n                    <text style={{fontWeight:\"bolder\", fontSize:\"110%\", marginBottom:\"10px\"}}>POI</text>\n                    {dicMedias && (listaPOI.map(u => {\n                        return(\n                            <div style={{padding:\"1px\", paddingLeft:\"4px\", paddingRight:\"4px\"}}>\n                                <text>{u}</text>\n                            </div>) \n                        }))}\n                    </div>\n                    <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n                    <text style={{fontWeight:\"bolder\", fontSize:\"110%\", marginBottom:\"10px\"}}>Tamaho (Mb)</text>\n                    {dicMedias && (listaPOI.map(u => {\n                        return(\n                            <div style={{padding:\"1px\", paddingLeft:\"4px\", paddingRight:\"4px\"}}>\n                                <text>{dicAtuais[u]}</text>\n                            </div>)   \n                        }))}\n                    </div>\n                    <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n                    <text style={{fontWeight:\"bolder\", fontSize:\"110%\", marginBottom:\"10px\"}}>Média</text>\n                    {dicMedias && (listaPOI.map(u => {\n                        return(\n                            <div style={{padding:\"1px\", paddingLeft:\"4px\", paddingRight:\"4px\"}}>\n                                <text>{dicMedias[u]}</text>\n                            </div>)   \n                        }))}\n                    </div>\n                </div>\n            )}</div>)}</div>)}\n\n        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-between\"}}>\n            <h3 style={{margin:\"0px\"}}>Câmeras pretas</h3>\n            <button onClick={() => switchToggleArrow(moduloStatusCamerasPretas, setModuloStatusCamerasPretas, setArrowStatusCamerasPretas)}\n                    style={{fontSize:\"110%\", width:\"25px\", height:\"25px\", borderRadius:\"100px\", borderColor:\"black\", marginBlock:\"5px\"}}>{arrowStatusCamerasPretas}</button>\n        </div>\n        <div style={{height:\"4px\", width:\"100%\", borderColor:\"black\", backgroundColor:\"black\", opacity:\"50%\", marginBottom:\"10px\"}}></div>\n        {moduloStatusCamerasPretas && (\n            <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-around\", marginTop:\"10px\", marginBottom:\"10px\"}}>\n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n                <text style={{fontWeight:\"bolder\", fontSize:\"110%\", marginBottom:\"5px\"}}>POI</text>\n                <text>Acesso A</text>\n                <text>CP Zara</text>\n                <text>CP JohnJohn</text>\n            </div>\n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\"}}>\n                <text style={{fontWeight:\"bolder\", fontSize:\"110%\", marginBottom:\"5px\"}}>Última imagem boa</text>\n                <text>Há 5 minutos</text>\n                <text>Há 2 horas</text>\n                <text>Há 1 hora</text>\n            </div>\n\n        </div>\n        )}\n\n        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-between\"}}>\n        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"center\"}}>\n                <h3 style={{margin:\"0px\"}}>App SightCorp</h3>\n                {props.statusSight && (boolCountSwitchSight(props.statusSight))}\n                {boolErrSight && (txtErrSight())}\n                {boolShowErrSight && (\n                    <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", backgroundColor:RED, borderRadius:\"1000px\", width:\"22px\", height:\"22px\", marginLeft:\"10px\"}}>\n                        <text style={{color:BG, fontWeight:\"bolder\", fontSize:\"90%\"}}>{errSight}</text>\n                    </div>\n                )}\n                \n            </div>\n            <button onClick={() => switchToggleArrow(moduloStatusSight, setModuloStatusSight, setArrowStatusSight)}\n                    style={{fontSize:\"110%\", width:\"25px\", height:\"25px\", borderRadius:\"100px\", borderColor:\"black\", marginBlock:\"5px\"}}>{arrowStatusSight}</button>\n        </div>\n        <div style={{height:\"4px\", width:\"100%\", borderColor:\"black\", backgroundColor:\"black\", opacity:\"50%\", marginBottom:\"10px\"}}></div>        \n        \n        {moduloStatusSight && (\n        <div>\n        {props.errStatusSight ?(\n            erroBanco()\n        ):(<div>\n        {props.statusSight.length !== 0 ? (\n        <div style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"space-around\", marginTop:\"10px\", marginBottom:\"10px\"}}>\n            \n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\"}}>\n\n                <text style={{fontWeight:\"bolder\", fontSize:\"110%\"}}>POI</text>\n               \n                {props.statusSight && (props.statusSight.map(u => {\n\n                    return (\n                        <div style={{height:\"10px\", padding:\"5px\"}}>\n                            <text>{u[\"pov\"]}</text>\n                        </div>\n                    )}))}\n\n            </div>\n\n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\"}}>\n\n                <text style={{fontWeight:\"bolder\", fontSize:\"110%\"}}>Estado</text>\n                {props.statusSight && (props.statusSight.map(u => {\n                    return (estadoSight(u[\"status\"]))\n                }))}\n\n            </div>\n\n        </div>):(\n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", justifyContent:\"center\", marginBottom:\"10px\", marginTop:\"10px\"}}>\n                <text>Sem aplicativos SightCorp detectados.</text>\n            </div>\n        )}\n        </div>)}\n        </div>\n        )}\n    </div>\n    )}\n    </div>\n  );\n}\n\nexport default Card;",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":19,"column":10,"nodeType":"49","messageId":"50","endLine":19,"endColumn":18},{"ruleId":"47","severity":1,"message":"51","line":19,"column":20,"nodeType":"49","messageId":"50","endLine":19,"endColumn":31},{"ruleId":"47","severity":1,"message":"52","line":20,"column":10,"nodeType":"49","messageId":"50","endLine":20,"endColumn":24},{"ruleId":"47","severity":1,"message":"53","line":20,"column":26,"nodeType":"49","messageId":"50","endLine":20,"endColumn":43},{"ruleId":"47","severity":1,"message":"54","line":21,"column":10,"nodeType":"49","messageId":"50","endLine":21,"endColumn":27},{"ruleId":"47","severity":1,"message":"55","line":21,"column":29,"nodeType":"49","messageId":"50","endLine":21,"endColumn":49},{"ruleId":"47","severity":1,"message":"56","line":36,"column":9,"nodeType":"49","messageId":"50","endLine":36,"endColumn":19},{"ruleId":"47","severity":1,"message":"57","line":38,"column":9,"nodeType":"49","messageId":"50","endLine":38,"endColumn":14},{"ruleId":"47","severity":1,"message":"58","line":125,"column":12,"nodeType":"49","messageId":"50","endLine":125,"endColumn":25},{"ruleId":"47","severity":1,"message":"59","line":129,"column":9,"nodeType":"49","messageId":"50","endLine":129,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":153,"column":6,"nodeType":"62","endLine":153,"endColumn":8,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":159,"column":9,"nodeType":"66","endLine":159,"endColumn":79},{"ruleId":"47","severity":1,"message":"67","line":15,"column":11,"nodeType":"49","messageId":"50","endLine":15,"endColumn":18},{"ruleId":"47","severity":1,"message":"68","line":20,"column":12,"nodeType":"49","messageId":"50","endLine":20,"endColumn":30},{"ruleId":"47","severity":1,"message":"69","line":20,"column":32,"nodeType":"49","messageId":"50","endLine":20,"endColumn":53},{"ruleId":"47","severity":1,"message":"70","line":28,"column":12,"nodeType":"49","messageId":"50","endLine":28,"endColumn":23},{"ruleId":"47","severity":1,"message":"71","line":28,"column":25,"nodeType":"49","messageId":"50","endLine":28,"endColumn":39},{"ruleId":"47","severity":1,"message":"72","line":48,"column":12,"nodeType":"49","messageId":"50","endLine":48,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":229,"column":39,"nodeType":"75","messageId":"76","endLine":229,"endColumn":41},{"ruleId":"73","severity":1,"message":"74","line":229,"column":90,"nodeType":"75","messageId":"76","endLine":229,"endColumn":92},{"ruleId":"73","severity":1,"message":"74","line":229,"column":137,"nodeType":"75","messageId":"76","endLine":229,"endColumn":139},{"ruleId":"47","severity":1,"message":"77","line":329,"column":17,"nodeType":"49","messageId":"50","endLine":329,"endColumn":25},{"ruleId":"73","severity":1,"message":"74","line":347,"column":21,"nodeType":"75","messageId":"76","endLine":347,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":347,"column":57,"nodeType":"75","messageId":"76","endLine":347,"endColumn":59},{"ruleId":"73","severity":1,"message":"74","line":347,"column":90,"nodeType":"75","messageId":"76","endLine":347,"endColumn":92},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'clientes' is assigned a value but never used.","Identifier","unusedVar","'setClientes' is assigned a value but never used.","'clienteUnidade' is assigned a value but never used.","'setClienteUnidade' is assigned a value but never used.","'clienteUnidadeEnd' is assigned a value but never used.","'setClienteUnidadeEnd' is assigned a value but never used.","'base64data' is assigned a value but never used.","'agent' is assigned a value but never used.","'onClickFilter' is defined but never used.","'cLog' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["80"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'headers' is assigned a value but never used.","'lastDataStatusFile' is assigned a value but never used.","'setLastDataStatusFile' is assigned a value but never used.","'boolErrComp' is assigned a value but never used.","'setBoolErrComp' is assigned a value but never used.","'dataTamanho' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'nRecente' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [getData]",{"range":"83","text":"84"},[4656,4658],"[getData]"]